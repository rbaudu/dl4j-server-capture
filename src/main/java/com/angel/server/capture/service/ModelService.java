package com.angel.server.capture.service;

import org.deeplearning4j.nn.multilayer.MultiLayerNetwork;
import org.deeplearning4j.util.ModelSerializer;
import org.deeplearning4j.zoo.PretrainedType;
import org.deeplearning4j.zoo.ZooModel;
import org.deeplearning4j.zoo.model.FaceNetNN4Small2;
import org.nd4j.linalg.api.ndarray.INDArray;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import javax.annotation.PostConstruct;
import java.io.File;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * Service de gestion des modèles DL4J
 * Charge et maintient en cache les modèles pré-entraînés
 */
@Service
public class ModelService {

    private static final Logger logger = LoggerFactory.getLogger(ModelService.class);

    // Configuration des modèles depuis application.properties
    @Value(\"${models.directory}\")\n    private String modelsDirectory;\n\n    @Value(\"${models.activity.image.standard.path}\")\n    private String activityImageStandardPath;\n\n    @Value(\"${models.activity.image.vgg16.path}\")\n    private String activityImageVgg16Path;\n\n    @Value(\"${models.activity.image.resnet.path}\")\n    private String activityImageResnetPath;\n\n    @Value(\"${models.activity.sound.standard.path}\")\n    private String activitySoundStandardPath;\n\n    @Value(\"${models.activity.sound.spectrogram.path}\")\n    private String activitySoundSpectrogramPath;\n\n    @Value(\"${models.activity.sound.mfcc.path}\")\n    private String activitySoundMfccPath;\n\n    @Value(\"${models.activity.image.default}\")\n    private String defaultImageModel;\n\n    @Value(\"${models.activity.sound.default}\")\n    private String defaultSoundModel;\n\n    @Value(\"${models.facenet.enabled}\")\n    private boolean faceNetEnabled;\n\n    @Value(\"${cache.models.enabled}\")\n    private boolean cacheEnabled;\n\n    // Cache des modèles chargés\n    private final Map<String, MultiLayerNetwork> modelCache = new ConcurrentHashMap<>();\n    private MultiLayerNetwork faceNetModel;\n\n    @PostConstruct\n    public void initializeModels() {\n        logger.info(\"Initialisation du service de modèles DL4J...\");\n        \n        // Créer le répertoire des modèles s'il n'existe pas\n        File modelsDir = new File(modelsDirectory);\n        if (!modelsDir.exists()) {\n            modelsDir.mkdirs();\n            logger.warn(\"Répertoire des modèles créé: {}\", modelsDirectory);\n        }\n        \n        // Initialiser FaceNet si activé\n        if (faceNetEnabled) {\n            initializeFaceNet();\n        }\n        \n        logger.info(\"Service de modèles initialisé\");\n    }\n\n    /**\n     * Charge le modèle d'activité pour les images\n     */\n    public MultiLayerNetwork getActivityImageModel(String modelType) {\n        String cacheKey = \"activity_image_\" + modelType;\n        \n        if (cacheEnabled && modelCache.containsKey(cacheKey)) {\n            return modelCache.get(cacheKey);\n        }\n        \n        String modelPath = getActivityImageModelPath(modelType);\n        MultiLayerNetwork model = loadModel(modelPath);\n        \n        if (cacheEnabled && model != null) {\n            modelCache.put(cacheKey, model);\n        }\n        \n        return model;\n    }\n\n    /**\n     * Charge le modèle d'activité pour les sons\n     */\n    public MultiLayerNetwork getActivitySoundModel(String modelType) {\n        String cacheKey = \"activity_sound_\" + modelType;\n        \n        if (cacheEnabled && modelCache.containsKey(cacheKey)) {\n            return modelCache.get(cacheKey);\n        }\n        \n        String modelPath = getActivitySoundModelPath(modelType);\n        MultiLayerNetwork model = loadModel(modelPath);\n        \n        if (cacheEnabled && model != null) {\n            modelCache.put(cacheKey, model);\n        }\n        \n        return model;\n    }\n\n    /**\n     * Retourne le modèle FaceNet pour la détection de personnes\n     */\n    public MultiLayerNetwork getFaceNetModel() {\n        return faceNetModel;\n    }\n\n    /**\n     * Charge un modèle depuis un fichier\n     */\n    private MultiLayerNetwork loadModel(String modelPath) {\n        try {\n            File modelFile = new File(modelPath);\n            if (!modelFile.exists()) {\n                logger.error(\"Fichier modèle non trouvé: {}\", modelPath);\n                return null;\n            }\n            \n            logger.info(\"Chargement du modèle: {}\", modelPath);\n            MultiLayerNetwork model = ModelSerializer.restoreMultiLayerNetwork(modelFile);\n            logger.info(\"Modèle chargé avec succès: {}\", modelPath);\n            \n            return model;\n        } catch (Exception e) {\n            logger.error(\"Erreur lors du chargement du modèle {}: {}\", modelPath, e.getMessage());\n            return null;\n        }\n    }\n\n    /**\n     * Initialise le modèle FaceNet depuis le Zoo DL4J\n     */\n    private void initializeFaceNet() {\n        try {\n            logger.info(\"Initialisation de FaceNet...\");\n            ZooModel zooModel = FaceNetNN4Small2.builder().build();\n            faceNetModel = (MultiLayerNetwork) zooModel.initPretrained(PretrainedType.IMAGENET);\n            logger.info(\"FaceNet initialisé avec succès\");\n        } catch (Exception e) {\n            logger.error(\"Erreur lors de l'initialisation de FaceNet: {}\", e.getMessage());\n            faceNetEnabled = false;\n        }\n    }\n\n    /**\n     * Retourne le chemin du modèle d'activité pour les images\n     */\n    private String getActivityImageModelPath(String modelType) {\n        switch (modelType.toLowerCase()) {\n            case \"vgg16\":\n                return activityImageVgg16Path;\n            case \"resnet\":\n                return activityImageResnetPath;\n            case \"standard\":\n            default:\n                return activityImageStandardPath;\n        }\n    }\n\n    /**\n     * Retourne le chemin du modèle d'activité pour les sons\n     */\n    private String getActivitySoundModelPath(String modelType) {\n        switch (modelType.toLowerCase()) {\n            case \"mfcc\":\n                return activitySoundMfccPath;\n            case \"spectrogram\":\n                return activitySoundSpectrogramPath;\n            case \"standard\":\n            default:\n                return activitySoundStandardPath;\n        }\n    }\n\n    /**\n     * Retourne le modèle d'image par défaut\n     */\n    public MultiLayerNetwork getDefaultActivityImageModel() {\n        return getActivityImageModel(defaultImageModel);\n    }\n\n    /**\n     * Retourne le modèle de son par défaut\n     */\n    public MultiLayerNetwork getDefaultActivitySoundModel() {\n        return getActivitySoundModel(defaultSoundModel);\n    }\n\n    /**\n     * Vérifie si un modèle est disponible\n     */\n    public boolean isModelAvailable(String modelType, String category) {\n        String modelPath;\n        if (\"image\".equals(category)) {\n            modelPath = getActivityImageModelPath(modelType);\n        } else if (\"sound\".equals(category)) {\n            modelPath = getActivitySoundModelPath(modelType);\n        } else {\n            return false;\n        }\n        \n        return new File(modelPath).exists();\n    }\n\n    /**\n     * Retourne les statistiques des modèles chargés\n     */\n    public Map<String, Object> getModelStats() {\n        Map<String, Object> stats = new HashMap<>();\n        stats.put(\"cache_enabled\", cacheEnabled);\n        stats.put(\"cached_models_count\", modelCache.size());\n        stats.put(\"facenet_enabled\", faceNetEnabled);\n        stats.put(\"facenet_loaded\", faceNetModel != null);\n        \n        Map<String, Boolean> availability = new HashMap<>();\n        availability.put(\"activity_image_standard\", isModelAvailable(\"standard\", \"image\"));\n        availability.put(\"activity_image_vgg16\", isModelAvailable(\"vgg16\", \"image\"));\n        availability.put(\"activity_image_resnet\", isModelAvailable(\"resnet\", \"image\"));\n        availability.put(\"activity_sound_standard\", isModelAvailable(\"standard\", \"sound\"));\n        availability.put(\"activity_sound_spectrogram\", isModelAvailable(\"spectrogram\", \"sound\"));\n        availability.put(\"activity_sound_mfcc\", isModelAvailable(\"mfcc\", \"sound\"));\n        \n        stats.put(\"model_availability\", availability);\n        \n        return stats;\n    }\n\n    /**\n     * Vide le cache des modèles\n     */\n    public void clearCache() {\n        modelCache.clear();\n        logger.info(\"Cache des modèles vidé\");\n    }\n}